import { useState, useCallback } from 'react'

/**
 * ÂïèÈ°å„Éó„Éº„É´ÁÆ°ÁêÜ„Ç´„Çπ„Çø„É†„Éï„ÉÉ„ÇØ
 * 
 * Ê©üËÉΩ:
 * - ÂïèÈ°å„Éó„Éº„É´Áµ±Ë®àÊÉÖÂ†±„ÅÆÂèñÂæó
 * - ÂïèÈ°å„ÅÆËøΩÂä†„ÉªÂèñÂæó
 * - ‰∏ÄÊã¨Âá¶ÁêÜ
 * 
 * @returns {Object} ÂïèÈ°å„Éó„Éº„É´Êìç‰ΩúÈñ¢Êï∞„Å®Áä∂ÊÖã
 */
export const useProblemPool = () => {
  const [problemPoolStats, setProblemPoolStats] = useState(null)
  const [isLoading, setIsLoading] = useState(false)

  /**
   * ÂïèÈ°å„Éó„Éº„É´Áµ±Ë®àÊÉÖÂ†±ÂèñÂæó
   */
  const fetchProblemPoolStats = useCallback(async () => {
    console.log('üìä [DEBUG] ÂïèÈ°å„Éó„Éº„É´Áµ±Ë®àÊÉÖÂ†±ÂèñÂæóÈñãÂßã - ÁèæÂú®ÊôÇÂàª:', new Date().toLocaleString())
    
    const apiUrl = window.CARITAS_API_URL
    console.log('üåê [DEBUG] API URLÁä∂ÊÖã:', apiUrl)
    
    if (!apiUrl) {
      console.warn('üìä [DEBUG] API URL„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì')
      return null
    }
    
    try {
      const statsUrl = `${apiUrl}/api/problem-pool/stats`
      console.log('üîó [DEBUG] Áµ±Ë®àÊÉÖÂ†±ÂèñÂæóURL:', statsUrl)
      
      const response = await fetch(statsUrl, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' },
        mode: 'cors',
        credentials: 'omit'
      })
      
      console.log('üìä [DEBUG] Áµ±Ë®àÊÉÖÂ†±ÂøúÁ≠î„Çπ„ÉÜ„Éº„Çø„Çπ:', response.status)
      
      if (response.ok) {
        const data = await response.json()
        setProblemPoolStats(data.stats)
        console.log('üìä [DEBUG] ÂïèÈ°å„Éó„Éº„É´Áµ±Ë®àÊÉÖÂ†±ÂèñÂæóÊàêÂäü:', data.stats)
        return data.stats
      } else {
        console.warn('üìä [DEBUG] Áµ±Ë®àÊÉÖÂ†±ÂèñÂæóÂ§±Êïó: HTTP„Çπ„ÉÜ„Éº„Çø„Çπ', response.status)
        const errorText = await response.text()
        console.warn('üìä [DEBUG] „Ç®„É©„ÉºÂøúÁ≠î:', errorText)
        return null
      }
    } catch (error) {
      console.warn('üìä [DEBUG] ÂïèÈ°å„Éó„Éº„É´Áµ±Ë®àÊÉÖÂ†±ÂèñÂæó„Ç®„É©„Éº:', error.message)
      console.warn('üìä [DEBUG] „Ç®„É©„ÉºË©≥Á¥∞:', error)
      return null
    }
  }, [])

  /**
   * ÂïèÈ°å„Çí„Éó„Éº„É´„Åã„ÇâÂèñÂæó
   * @param {string} grade - Â≠¶Âπ¥
   * @param {string} unit - ÂçòÂÖÉ
   * @param {string} level - Èõ£ÊòìÂ∫¶
   */
  const getProblemFromPool = useCallback(async (grade, unit, level) => {
    const apiUrl = window.CARITAS_API_URL
    if (!apiUrl) {
      throw new Error('APIÊé•Á∂ö„ÅåÁ¢∫Á´ã„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì')
    }

    setIsLoading(true)
    
    try {
      console.log(`üìö ÂïèÈ°å„Éó„Éº„É´ÂèñÂæó„É™„ÇØ„Ç®„Çπ„Éà: ${grade}/${unit}/${level}`)
      
      const response = await fetch(`${apiUrl}/api/problem-pool/${encodeURIComponent(grade)}/${encodeURIComponent(unit)}/${encodeURIComponent(level)}`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' },
        mode: 'cors',
        credentials: 'omit'
      })
      
      if (!response.ok) {
        if (response.status === 404) {
          const errorData = await response.json()
          console.log('üìö „Éó„Éº„É´„Å´ÂïèÈ°å„Å™„Åó:', errorData.message)
          throw new Error(`ÊåáÂÆö„Åï„Çå„ÅüÊù°‰ª∂„ÅÆÂïèÈ°å„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ\n\nË©≥Á¥∞: ${errorData.message}`)
        }
        throw new Error(`HTTP„Ç®„É©„Éº: ${response.status}`)
      }
      
      const data = await response.json()
      if (data.success && data.problem) {
        console.log('‚úÖ ÂïèÈ°å„Éó„Éº„É´„Åã„ÇâÂèñÂæóÊàêÂäü:', data.problem.id)
        return data.problem
      }
      
      throw new Error('„Éó„Éº„É´„Åã„ÇâÂïèÈ°å„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü')
      
    } catch (error) {
      console.error('üìö ÂïèÈ°å„Éó„Éº„É´ÂèñÂæó„Ç®„É©„Éº:', error)
      throw error
    } finally {
      setIsLoading(false)
    }
  }, [])

  /**
   * ÂïèÈ°å„Çí„Éó„Éº„É´„Å´ËøΩÂä†
   * @param {Object} problem - ËøΩÂä†„Åô„ÇãÂïèÈ°å„Éá„Éº„Çø
   */
  const addProblemToPool = useCallback(async (problem) => {
    const apiUrl = window.CARITAS_API_URL
    if (!apiUrl) {
      throw new Error('APIÊé•Á∂ö„ÅåÁ¢∫Á´ã„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì')
    }

    try {
      console.log('üìù ÂïèÈ°å„Çí„Éó„Éº„É´„Å´ËøΩÂä†‰∏≠:', problem.id || 'IDÊú™Ë®≠ÂÆö')
      
      const response = await fetch(`${apiUrl}/api/problem-pool/add`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ problem }),
        mode: 'cors',
        credentials: 'omit'
      })
      
      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || `HTTP„Ç®„É©„Éº: ${response.status}`)
      }
      
      const data = await response.json()
      if (data.success) {
        console.log('‚úÖ ÂïèÈ°å„Éó„Éº„É´ËøΩÂä†ÊàêÂäü:', data.problem_id)
        
        // Áµ±Ë®àÊÉÖÂ†±„ÇíÂÜçÂèñÂæó
        await fetchProblemPoolStats()
        
        return { success: true, problemId: data.problem_id }
      }
      
      throw new Error('ÂïèÈ°å„ÅÆËøΩÂä†„Å´Â§±Êïó„Åó„Åæ„Åó„Åü')
      
    } catch (error) {
      console.error('üìù ÂïèÈ°å„Éó„Éº„É´ËøΩÂä†„Ç®„É©„Éº:', error)
      throw error
    }
  }, [fetchProblemPoolStats])

  /**
   * Ë§áÊï∞ÂïèÈ°å„Çí‰∏ÄÊã¨„Åß„Éó„Éº„É´„Å´ËøΩÂä†
   * @param {Array} problems - ËøΩÂä†„Åô„ÇãÂïèÈ°å„Éá„Éº„Çø„ÅÆÈÖçÂàó
   */
  const addBatchToPool = useCallback(async (problems) => {
    const apiUrl = window.CARITAS_API_URL
    if (!apiUrl) {
      throw new Error('APIÊé•Á∂ö„ÅåÁ¢∫Á´ã„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì')
    }

    try {
      console.log(`üöÄ ${problems.length}Âïè„ÅÆ‰∏ÄÊã¨„Éó„Éº„É´ËøΩÂä†ÈñãÂßã`)
      
      const response = await fetch(`${apiUrl}/api/problem-pool/add-batch`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ problems })
      })

      if (!response.ok) {
        throw new Error(`HTTP„Ç®„É©„Éº: ${response.status}`)
      }

      const data = await response.json()
      
      if (data.success || (data.success_count && data.success_count > 0)) {
        const successCount = data.success_count || 0
        const failureCount = data.failure_count || 0
        
        console.log(`‚úÖ ‰∏ÄÊã¨„Éó„Éº„É´ËøΩÂä†ÂÆå‰∫Ü: ÊàêÂäü${successCount}Âïè, Â§±Êïó${failureCount}Âïè`)
        
        // Áµ±Ë®àÊÉÖÂ†±„ÇíÊõ¥Êñ∞
        await fetchProblemPoolStats()
        
        return {
          success: true,
          successCount,
          failureCount,
          results: data.results || []
        }
      } else {
        throw new Error(data.error || data.message || '‰∏ÄÊã¨ËøΩÂä†„Å´Â§±Êïó„Åó„Åæ„Åó„Åü')
      }
      
    } catch (error) {
      console.error('üöÄ ‰∏ÄÊã¨„Éó„Éº„É´ËøΩÂä†„Ç®„É©„Éº:', error)
      throw error
    }
  }, [fetchProblemPoolStats])

  /**
   * „Éó„Éº„É´Áµ±Ë®àÊÉÖÂ†±„ÅÆ„É™„Ç¢„É´„Çø„Ç§„É†Êõ¥Êñ∞
   */
  const refreshStats = useCallback(async () => {
    console.log('üîÑ ÂïèÈ°å„Éó„Éº„É´Áµ±Ë®àÊÉÖÂ†±„ÇíÊõ¥Êñ∞‰∏≠...')
    return await fetchProblemPoolStats()
  }, [fetchProblemPoolStats])

  /**
   * „Éó„Éº„É´ÂÜÖÊ§úÁ¥¢ÔºàÂ∞ÜÊù•„ÅÆÊã°ÂºµÁî®Ôºâ
   * @param {Object} filters - Ê§úÁ¥¢„Éï„Ç£„É´„Çø„Éº
   */
  const searchProblems = useCallback(async (filters = {}) => {
    const apiUrl = window.CARITAS_API_URL
    if (!apiUrl) {
      throw new Error('APIÊé•Á∂ö„ÅåÁ¢∫Á´ã„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì')
    }

    try {
      const queryParams = new URLSearchParams(filters).toString()
      const response = await fetch(`${apiUrl}/api/problem-pool/search?${queryParams}`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' },
        mode: 'cors',
        credentials: 'omit'
      })

      if (!response.ok) {
        throw new Error(`HTTP„Ç®„É©„Éº: ${response.status}`)
      }

      const data = await response.json()
      return data.problems || []
      
    } catch (error) {
      console.error('üîç „Éó„Éº„É´Ê§úÁ¥¢„Ç®„É©„Éº:', error)
      throw error
    }
  }, [])

  return {
    problemPoolStats,
    isLoading,
    fetchProblemPoolStats,
    getProblemFromPool,
    addProblemToPool,
    addBatchToPool,
    refreshStats,
    searchProblems
  }
}